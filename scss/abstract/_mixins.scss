// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

@use 'sass:meta';
@use 'sass:math';
@use 'sass:map';
@use 'breakpoints' as *;

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus,
    &:focus-within {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus,
    &:focus-within {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Breakpoint map
/// @param {Map} $breakpoints - Breakpoint map from `_breakpoints.scss`
/// @param {String} $size - Breakpoint size
/// @param {Number} $size - Breakpoint size

@mixin mq($size) {
  @if map.has-key($breakpoints, $size) {
    $breakpoint: map-get($breakpoints, $size);
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if meta.type-of($size) == number {
    @if math.is-unitless($size) {
      @error 'when using a number with @mq() make sure to include a unit';
    } @else {
      @media screen and (min-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}

/// Button mixin to demonstrate the use of pseudo-elements
/// @param {Color} $bg-color - Background color
/// @param {Color} $color - Text color
/// @param {Color} $color-after - Color of the button after hover

@mixin btn($bg-color: $gray-400, $color: $gray-900, $color-after: $white) {
  &,
  &:link,
  &:visited {
    position: relative;
    display: inline-block;
    padding: 1.5rem 4rem;
    margin-inline: auto;
    border: none;
    border-radius: $rounded-full;
    cursor: pointer;
    transition: all 0.2s;
    background-color: $bg-color;
    color: $color;
  }

  &::after {
    content: '';
    position: absolute;
    display: inline-block;
    z-index: -1;
    inset: 0 0 0 0;
    border-radius: $rounded-full;
    background-color: $color-after;
    transition: all 0.4s;
  }

  &:hover,
  &:focus {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);

    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }
  /* Create an effect of active button by raising the vertical dimension */
  &:active {
    outline: none;
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
  }

  &:disabled {
    outline: 2px solid $dark;
    background-color: $white;
    cursor: not-allowed;
  }
}
